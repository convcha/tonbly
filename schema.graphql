# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"columns and relationships of \"article\""
type article {
  "An object relationship"
  author: user!
  author_user_id: Int!
  content: String!
  id: Int!
  title: String!
}

"aggregated selection of \"article\""
type article_aggregate {
  aggregate: article_aggregate_fields
  nodes: [article!]!
}

"aggregate fields of \"article\""
type article_aggregate_fields {
  avg: article_avg_fields
  count(columns: [article_select_column!], distinct: Boolean): Int
  max: article_max_fields
  min: article_min_fields
  stddev: article_stddev_fields
  stddev_pop: article_stddev_pop_fields
  stddev_samp: article_stddev_samp_fields
  sum: article_sum_fields
  var_pop: article_var_pop_fields
  var_samp: article_var_samp_fields
  variance: article_variance_fields
}

"aggregate avg on columns"
type article_avg_fields {
  author_user_id: Float
  id: Float
}

"aggregate max on columns"
type article_max_fields {
  author_user_id: Int
  content: String
  id: Int
  title: String
}

"aggregate min on columns"
type article_min_fields {
  author_user_id: Int
  content: String
  id: Int
  title: String
}

"response of any mutation on the table \"article\""
type article_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [article!]!
}

"aggregate stddev on columns"
type article_stddev_fields {
  author_user_id: Float
  id: Float
}

"aggregate stddev_pop on columns"
type article_stddev_pop_fields {
  author_user_id: Float
  id: Float
}

"aggregate stddev_samp on columns"
type article_stddev_samp_fields {
  author_user_id: Float
  id: Float
}

"aggregate sum on columns"
type article_sum_fields {
  author_user_id: Int
  id: Int
}

"aggregate var_pop on columns"
type article_var_pop_fields {
  author_user_id: Float
  id: Float
}

"aggregate var_samp on columns"
type article_var_samp_fields {
  author_user_id: Float
  id: Float
}

"aggregate variance on columns"
type article_variance_fields {
  author_user_id: Float
  id: Float
}

"mutation root"
type mutation_root {
  "delete data from the table: \"article\""
  delete_article(
    #filter the rows which have to be deleted
    where: article_bool_exp!
  ): article_mutation_response
  "delete data from the table: \"user\""
  delete_user(
    #filter the rows which have to be deleted
    where: user_bool_exp!
  ): user_mutation_response
  "insert data into the table: \"article\""
  insert_article(
    #the rows to be inserted
    objects: [article_insert_input!]!
    #on conflict condition
    on_conflict: article_on_conflict
  ): article_mutation_response
  "insert data into the table: \"user\""
  insert_user(
    #the rows to be inserted
    objects: [user_insert_input!]!
    #on conflict condition
    on_conflict: user_on_conflict
  ): user_mutation_response
  "update data of the table: \"article\""
  update_article(
    #increments the integer columns with given value of the filtered values
    _inc: article_inc_input
    #sets the columns of the filtered rows to the given values
    _set: article_set_input
    #filter the rows which have to be updated
    where: article_bool_exp!
  ): article_mutation_response
  "update data of the table: \"user\""
  update_user(
    #increments the integer columns with given value of the filtered values
    _inc: user_inc_input
    #sets the columns of the filtered rows to the given values
    _set: user_set_input
    #filter the rows which have to be updated
    where: user_bool_exp!
  ): user_mutation_response
}

"query root"
type query_root {
  "fetch data from the table: \"article\""
  article(
    #distinct select on columns
    distinct_on: [article_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [article_order_by!]
    #filter the rows returned
    where: article_bool_exp
  ): [article!]!
  "fetch aggregated fields from the table: \"article\""
  article_aggregate(
    #distinct select on columns
    distinct_on: [article_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [article_order_by!]
    #filter the rows returned
    where: article_bool_exp
  ): article_aggregate!
  "fetch data from the table: \"article\" using primary key columns"
  article_by_pk(id: Int!): article
  "fetch data from the table: \"user\""
  user(
    #distinct select on columns
    distinct_on: [user_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [user_order_by!]
    #filter the rows returned
    where: user_bool_exp
  ): [user!]!
  "fetch aggregated fields from the table: \"user\""
  user_aggregate(
    #distinct select on columns
    distinct_on: [user_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [user_order_by!]
    #filter the rows returned
    where: user_bool_exp
  ): user_aggregate!
  "fetch data from the table: \"user\" using primary key columns"
  user_by_pk(id: Int!): user
}

"subscription root"
type subscription_root {
  "fetch data from the table: \"article\""
  article(
    #distinct select on columns
    distinct_on: [article_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [article_order_by!]
    #filter the rows returned
    where: article_bool_exp
  ): [article!]!
  "fetch aggregated fields from the table: \"article\""
  article_aggregate(
    #distinct select on columns
    distinct_on: [article_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [article_order_by!]
    #filter the rows returned
    where: article_bool_exp
  ): article_aggregate!
  "fetch data from the table: \"article\" using primary key columns"
  article_by_pk(id: Int!): article
  "fetch data from the table: \"user\""
  user(
    #distinct select on columns
    distinct_on: [user_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [user_order_by!]
    #filter the rows returned
    where: user_bool_exp
  ): [user!]!
  "fetch aggregated fields from the table: \"user\""
  user_aggregate(
    #distinct select on columns
    distinct_on: [user_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [user_order_by!]
    #filter the rows returned
    where: user_bool_exp
  ): user_aggregate!
  "fetch data from the table: \"user\" using primary key columns"
  user_by_pk(id: Int!): user
}

"columns and relationships of \"user\""
type user {
  "An array relationship"
  articles(
    #distinct select on columns
    distinct_on: [article_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [article_order_by!]
    #filter the rows returned
    where: article_bool_exp
  ): [article!]!
  "An aggregated array relationship"
  articles_aggregate(
    #distinct select on columns
    distinct_on: [article_select_column!]
    #limit the number of rows returned
    limit: Int
    #skip the first n rows. Use only with order_by
    offset: Int
    #sort the rows by one or more columns
    order_by: [article_order_by!]
    #filter the rows returned
    where: article_bool_exp
  ): article_aggregate!
  email: String!
  id: Int!
  name: String!
  password: String!
  role: String!
  salt: String!
}

"aggregated selection of \"user\""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"aggregate fields of \"user\""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"aggregate avg on columns"
type user_avg_fields {
  id: Float
}

"aggregate max on columns"
type user_max_fields {
  email: String
  id: Int
  name: String
  password: String
  role: String
  salt: String
}

"aggregate min on columns"
type user_min_fields {
  email: String
  id: Int
  name: String
  password: String
  role: String
  salt: String
}

"response of any mutation on the table \"user\""
type user_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [user!]!
}

"aggregate stddev on columns"
type user_stddev_fields {
  id: Float
}

"aggregate stddev_pop on columns"
type user_stddev_pop_fields {
  id: Float
}

"aggregate stddev_samp on columns"
type user_stddev_samp_fields {
  id: Float
}

"aggregate sum on columns"
type user_sum_fields {
  id: Int
}

"aggregate var_pop on columns"
type user_var_pop_fields {
  id: Float
}

"aggregate var_samp on columns"
type user_var_samp_fields {
  id: Float
}

"aggregate variance on columns"
type user_variance_fields {
  id: Float
}

"unique or primary key constraints on table \"article\""
enum article_constraint {
  #unique or primary key constraint
  article_pkey
}

"select columns of table \"article\""
enum article_select_column {
  #column name
  author_user_id
  #column name
  content
  #column name
  id
  #column name
  title
}

"update columns of table \"article\""
enum article_update_column {
  #column name
  author_user_id
  #column name
  content
  #column name
  id
  #column name
  title
}

"column ordering options"
enum order_by {
  #in the ascending order, nulls last
  asc
  #in the ascending order, nulls first
  asc_nulls_first
  #in the ascending order, nulls last
  asc_nulls_last
  #in the descending order, nulls first
  desc
  #in the descending order, nulls first
  desc_nulls_first
  #in the descending order, nulls last
  desc_nulls_last
}

"unique or primary key constraints on table \"user\""
enum user_constraint {
  #unique or primary key constraint
  user_email_key
  #unique or primary key constraint
  user_pkey
}

"select columns of table \"user\""
enum user_select_column {
  #column name
  email
  #column name
  id
  #column name
  name
  #column name
  password
  #column name
  role
  #column name
  salt
}

"update columns of table \"user\""
enum user_update_column {
  #column name
  email
  #column name
  id
  #column name
  name
  #column name
  password
  #column name
  role
  #column name
  salt
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"order by aggregate values of table \"article\""
input article_aggregate_order_by {
  avg: article_avg_order_by
  count: order_by
  max: article_max_order_by
  min: article_min_order_by
  stddev: article_stddev_order_by
  stddev_pop: article_stddev_pop_order_by
  stddev_samp: article_stddev_samp_order_by
  sum: article_sum_order_by
  var_pop: article_var_pop_order_by
  var_samp: article_var_samp_order_by
  variance: article_variance_order_by
}

"input type for inserting array relation for remote table \"article\""
input article_arr_rel_insert_input {
  data: [article_insert_input!]!
  on_conflict: article_on_conflict
}

"order by avg() on columns of table \"article\""
input article_avg_order_by {
  author_user_id: order_by
  id: order_by
}

"Boolean expression to filter rows from the table \"article\". All fields are combined with a logical 'AND'."
input article_bool_exp {
  _and: [article_bool_exp]
  _not: article_bool_exp
  _or: [article_bool_exp]
  author: user_bool_exp
  author_user_id: Int_comparison_exp
  content: String_comparison_exp
  id: Int_comparison_exp
  title: String_comparison_exp
}

"input type for incrementing integer columne in table \"article\""
input article_inc_input {
  author_user_id: Int
  id: Int
}

"input type for inserting data into table \"article\""
input article_insert_input {
  author: user_obj_rel_insert_input
  author_user_id: Int
  content: String
  id: Int
  title: String
}

"order by max() on columns of table \"article\""
input article_max_order_by {
  author_user_id: order_by
  content: order_by
  id: order_by
  title: order_by
}

"order by min() on columns of table \"article\""
input article_min_order_by {
  author_user_id: order_by
  content: order_by
  id: order_by
  title: order_by
}

"input type for inserting object relation for remote table \"article\""
input article_obj_rel_insert_input {
  data: article_insert_input!
  on_conflict: article_on_conflict
}

"on conflict condition type for table \"article\""
input article_on_conflict {
  constraint: article_constraint!
  update_columns: [article_update_column!]!
  where: article_bool_exp
}

"ordering options when selecting data from \"article\""
input article_order_by {
  author: user_order_by
  author_user_id: order_by
  content: order_by
  id: order_by
  title: order_by
}

"input type for updating data in table \"article\""
input article_set_input {
  author_user_id: Int
  content: String
  id: Int
  title: String
}

"order by stddev() on columns of table \"article\""
input article_stddev_order_by {
  author_user_id: order_by
  id: order_by
}

"order by stddev_pop() on columns of table \"article\""
input article_stddev_pop_order_by {
  author_user_id: order_by
  id: order_by
}

"order by stddev_samp() on columns of table \"article\""
input article_stddev_samp_order_by {
  author_user_id: order_by
  id: order_by
}

"order by sum() on columns of table \"article\""
input article_sum_order_by {
  author_user_id: order_by
  id: order_by
}

"order by var_pop() on columns of table \"article\""
input article_var_pop_order_by {
  author_user_id: order_by
  id: order_by
}

"order by var_samp() on columns of table \"article\""
input article_var_samp_order_by {
  author_user_id: order_by
  id: order_by
}

"order by variance() on columns of table \"article\""
input article_variance_order_by {
  author_user_id: order_by
  id: order_by
}

"order by aggregate values of table \"user\""
input user_aggregate_order_by {
  avg: user_avg_order_by
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
  stddev: user_stddev_order_by
  stddev_pop: user_stddev_pop_order_by
  stddev_samp: user_stddev_samp_order_by
  sum: user_sum_order_by
  var_pop: user_var_pop_order_by
  var_samp: user_var_samp_order_by
  variance: user_variance_order_by
}

"input type for inserting array relation for remote table \"user\""
input user_arr_rel_insert_input {
  data: [user_insert_input!]!
  on_conflict: user_on_conflict
}

"order by avg() on columns of table \"user\""
input user_avg_order_by {
  id: order_by
}

"Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'."
input user_bool_exp {
  _and: [user_bool_exp]
  _not: user_bool_exp
  _or: [user_bool_exp]
  articles: article_bool_exp
  email: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  password: String_comparison_exp
  role: String_comparison_exp
  salt: String_comparison_exp
}

"input type for incrementing integer columne in table \"user\""
input user_inc_input {
  id: Int
}

"input type for inserting data into table \"user\""
input user_insert_input {
  articles: article_arr_rel_insert_input
  email: String
  id: Int
  name: String
  password: String
  role: String
  salt: String
}

"order by max() on columns of table \"user\""
input user_max_order_by {
  email: order_by
  id: order_by
  name: order_by
  password: order_by
  role: order_by
  salt: order_by
}

"order by min() on columns of table \"user\""
input user_min_order_by {
  email: order_by
  id: order_by
  name: order_by
  password: order_by
  role: order_by
  salt: order_by
}

"input type for inserting object relation for remote table \"user\""
input user_obj_rel_insert_input {
  data: user_insert_input!
  on_conflict: user_on_conflict
}

"on conflict condition type for table \"user\""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]!
  where: user_bool_exp
}

"ordering options when selecting data from \"user\""
input user_order_by {
  articles_aggregate: article_aggregate_order_by
  email: order_by
  id: order_by
  name: order_by
  password: order_by
  role: order_by
  salt: order_by
}

"input type for updating data in table \"user\""
input user_set_input {
  email: String
  id: Int
  name: String
  password: String
  role: String
  salt: String
}

"order by stddev() on columns of table \"user\""
input user_stddev_order_by {
  id: order_by
}

"order by stddev_pop() on columns of table \"user\""
input user_stddev_pop_order_by {
  id: order_by
}

"order by stddev_samp() on columns of table \"user\""
input user_stddev_samp_order_by {
  id: order_by
}

"order by sum() on columns of table \"user\""
input user_sum_order_by {
  id: order_by
}

"order by var_pop() on columns of table \"user\""
input user_var_pop_order_by {
  id: order_by
}

"order by var_samp() on columns of table \"user\""
input user_var_samp_order_by {
  id: order_by
}

"order by variance() on columns of table \"user\""
input user_variance_order_by {
  id: order_by
}
